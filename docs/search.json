[{"path":"https://tnagler.github.io/vinereg/articles/abalone-example.html","id":"load-required-packages","dir":"Articles","previous_headings":"","what":"Load required packages","title":"Example usage of the vinereg package","text":"","code":"library(vinereg)  require(ggplot2) require(dplyr) require(tidyr) require(AppliedPredictiveModeling)"},{"path":"https://tnagler.github.io/vinereg/articles/abalone-example.html","id":"data-analysis","dir":"Articles","previous_headings":"","what":"Data analysis","title":"Example usage of the vinereg package","text":"consider data set abalone UCI Machine Learning Repository (https://archive.ics.uci.edu/ml/datasets/abalone) focus female sub-population. first application consider continuous variables fit models predict quantiles weight (whole) given predictors length, diameter, height.","code":"set.seed(5)"},{"path":"https://tnagler.github.io/vinereg/articles/abalone-example.html","id":"load-and-clean-data","dir":"Articles","previous_headings":"Data analysis","what":"Load and clean data","title":"Example usage of the vinereg package","text":"","code":"data(abalone, package = \"AppliedPredictiveModeling\") colnames(abalone) <- c(   \"sex\", \"length\", \"diameter\", \"height\", \"whole\",    \"shucked\", \"viscera\", \"shell\", \"rings\" ) abalone_f <- abalone %>%     dplyr::filter(sex == \"F\") %>%        # select female abalones     dplyr::select(-sex) %>%         # remove id and sex variables     dplyr::filter(height < max(height))  # remove height outlier pairs(abalone_f, pch = \".\")"},{"path":[]},{"path":"https://tnagler.github.io/vinereg/articles/abalone-example.html","id":"parametric-d-vine-quantile-regression","dir":"Articles","previous_headings":"D-vine regression models","what":"Parametric D-vine quantile regression","title":"Example usage of the vinereg package","text":"consider female subset fit parametric regression D-vine response weight given covariates len, diameter height (ignoring discreteness variables). D-vine based model selected sequentially maximizing conditional log-likelihood response given covariates. Covariates added increase (possibly AIC- BIC-corrected) conditional log-likelihood. use function vinereg() fit regression D-vine predicting response weight given covariates length, diameter, height. argument family_set determines pair-copulas estimated. use one-parameter families t copula . selcrit argument specifies penalty type conditional log-likelihood criterion variable selection. result field order shows selected covariates ranking order D-vine. field vine contains fitted D-vine, first variable corresponds response. object class \"vinecop_dist\" can use rvineocpulib’s functionality summarize model can also plot contours fitted pair-copulas.","code":"fit_vine_par <- vinereg(   whole ~ length + diameter + height,    data = abalone_f,     family_set = c(\"onepar\", \"t\"),   selcrit = \"aic\" ) fit_vine_par$order ## [1] \"length\"   \"height\"   \"diameter\" summary(fit_vine_par$vine) ## # A data.frame: 6 x 11  ##  tree edge conditioned conditioning var_types family rotation  parameters df ##     1    1        1, 2                    c,c gumbel      180         5.2  1 ##     1    2        2, 4                    c,c gumbel      180         2.4  1 ##     1    3        4, 3                    c,c gumbel      180         2.4  1 ##     2    1        1, 4            2       c,c      t        0 0.45, 21.87  2 ##     2    2        2, 3            4       c,c      t        0  0.91, 4.68  2 ##     3    1        1, 3         4, 2       c,c      t        0  0.31, 7.40  2 ##   tau loglik ##  0.81   1629 ##  0.58    672 ##  0.59    709 ##  0.30    147 ##  0.73   1193 ##  0.20     72 ##  ## --- ## 1 <-> whole,   2 <-> length,   3 <-> diameter,   4 <-> height contour(fit_vine_par$vine)"},{"path":"https://tnagler.github.io/vinereg/articles/abalone-example.html","id":"estimation-of-corresponding-conditional-quantiles","dir":"Articles","previous_headings":"D-vine regression models","what":"Estimation of corresponding conditional quantiles","title":"Example usage of the vinereg package","text":"order visualize predicted influence covariates, plot estimated quantiles arising D-vine model levels 0.1, 0.5 0.9 covariates. call fitted() function fit_vine_par extract fitted values multiple quantile levels. equivalent predicting quantile training data. latter function useful --sample predictions. examine effect individual variables, plot predicted quantiles variables. visualize relationship clearly, add smoothed line quantile level. gives estimate expected effect variable (taking expectation respect variables).  fitted quantile curves suggest non-linear effect three variables.","code":"# quantile levels alpha_vec <- c(0.1, 0.5, 0.9) pred_vine_par <- fitted(fit_vine_par, alpha = alpha_vec) # equivalent to: # predict(fit_vine_par, newdata = abalone.f, alpha = alpha_vec) head(pred_vine_par) ##         0.1       0.5       0.9 ## 1 0.6717860 0.7667223 0.8716322 ## 2 0.6968823 0.7903849 0.9014625 ## 3 0.6794480 0.7843661 0.8914415 ## 4 0.7754027 0.8800505 0.9976871 ## 5 0.5950431 0.6996904 0.8273506 ## 6 0.6755811 0.7729168 0.8860187 plot_effects(fit_vine_par) ## `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'"},{"path":"https://tnagler.github.io/vinereg/articles/abalone-example.html","id":"comparison-to-the-benchmark-model-linear-quantile-regression","dir":"Articles","previous_headings":"D-vine regression models","what":"Comparison to the benchmark model: linear quantile regression","title":"Example usage of the vinereg package","text":"can compared linear quantile regression:","code":"pred_lqr <- pred_vine_par for (a in seq_along(alpha_vec)) {     my.rq <- quantreg::rq(         whole ~ length + diameter + height,          tau = alpha_vec[a],          data = abalone_f     )     pred_lqr[, a] <- quantreg::predict.rq(my.rq) }  plot_marginal_effects <- function(covs, preds) {     cbind(covs, preds) %>%         tidyr::gather(alpha, prediction, -seq_len(NCOL(covs))) %>%         dplyr::mutate(prediction = as.numeric(prediction)) %>%         tidyr::gather(variable, value, -(alpha:prediction)) %>%         ggplot(aes(value, prediction, color = alpha)) +         geom_point(alpha = 0.15) +          geom_smooth(method = \"gam\", formula = y ~ s(x, bs = \"cs\"), se = FALSE) +          facet_wrap(~ variable, scale = \"free_x\") +         ylab(quote(q(y* \"|\" * x[1] * \",...,\" * x[p]))) +         xlab(quote(x[k])) +         theme(legend.position = \"bottom\") } plot_marginal_effects(abalone_f[, 1:3], pred_lqr)"},{"path":"https://tnagler.github.io/vinereg/articles/abalone-example.html","id":"nonparametric-d-vine-quantile-regression","dir":"Articles","previous_headings":"D-vine regression models","what":"Nonparametric D-vine quantile regression","title":"Example usage of the vinereg package","text":"also want check whether results change, estimate pair-copulas nonparametrically.  Now length height variables selected predictors. Let’s look marginal effects.  effects look similar parametric one, slightly wiggly. Note even diameter selected covariate, ’s marginal effect captured model. just provide additional information height length already accounted .","code":"fit_vine_np <- vinereg(   whole ~ length + diameter + height,   data = abalone_f,   family_set = \"nonpar\",   selcrit = \"aic\" ) fit_vine_np ## D-vine regression model: whole | length, height, diameter  ## nobs = 1306, edf = 96.28, cll = 1208.42, caic = -2224.28, cbic = -1726.05 contour(fit_vine_np$vine) plot_effects(fit_vine_np, var = c(\"diameter\", \"height\", \"length\")) ## `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'"},{"path":"https://tnagler.github.io/vinereg/articles/abalone-example.html","id":"discrete-d-vine-quantile-regression","dir":"Articles","previous_headings":"D-vine regression models","what":"Discrete D-vine quantile regression","title":"Example usage of the vinereg package","text":"deal discrete variables, use methodology Schallhorn et al. (2017). estimating nonparametric pair-copulas discrete variable(s), jittering used (Nagler, 2017). let vinereg() know variable discrete declaring ordered.","code":"abalone_f$rings <- as.ordered(abalone_f$rings) fit_disc <- vinereg(rings ~ ., data = abalone_f, selcrit = \"aic\") fit_disc ## D-vine regression model: rings | shell, shucked, whole, viscera, diameter, length, height  ## nobs = 1306, edf = 13, cll = -2737, caic = 5500.01, cbic = 5567.28 plot_effects(fit_disc) ## `geom_smooth()` using method = 'loess' and formula = 'y ~ x'"},{"path":"https://tnagler.github.io/vinereg/articles/abalone-example.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Example usage of the vinereg package","text":"Kraus Czado (2017), D-vine copula based quantile regression, Computational Statistics Data Analysis, 110, 1-18 Nagler (2017), generic approach nonparametric function estimation mixed data, Statistics & Probability Letters, 137:326–330 Schallhorn, Kraus, Nagler Czado (2017), D-vine quantile regression discrete variables, arXiv preprint","code":""},{"path":"https://tnagler.github.io/vinereg/articles/bike-rental.html","id":"required-packages","dir":"Articles","previous_headings":"","what":"Required packages","title":"D-vine quantile regression with discrete variables: analysis of bike rental data","text":"","code":"library(vinereg) require(ggplot2) require(dplyr) require(purrr) require(scales) require(quantreg)"},{"path":"https://tnagler.github.io/vinereg/articles/bike-rental.html","id":"plot-function-for-marginal-effects","dir":"Articles","previous_headings":"","what":"Plot function for marginal effects","title":"D-vine quantile regression with discrete variables: analysis of bike rental data","text":"","code":"plot_marginal_effects <- function(covs, preds) {     cbind(covs, preds) %>%         tidyr::gather(alpha, prediction, -seq_len(NCOL(covs))) %>%         dplyr::mutate(prediction = as.numeric(prediction)) %>%         tidyr::gather(variable, value, -(alpha:prediction)) %>%         dplyr::mutate(value = as.numeric(value)) %>%         ggplot(aes(value, prediction, color = alpha)) +         geom_point(alpha = 0.15) +          geom_smooth(span = 0.5, se = FALSE) +          facet_wrap(~ variable, scale = \"free_x\") +         theme(legend.position = \"none\") +         theme(plot.margin = unit(c(0, 0, 0, 0), \"mm\")) +         xlab(\"\") }"},{"path":[]},{"path":"https://tnagler.github.io/vinereg/articles/bike-rental.html","id":"load-data","dir":"Articles","previous_headings":"Data preparation","what":"Load data","title":"D-vine quantile regression with discrete variables: analysis of bike rental data","text":"","code":"bikedata <- read.csv(\"day.csv\") bikedata[, 2] <- as.Date(bikedata[, 2]) head(bikedata) ##   instant     dteday season yr mnth holiday weekday workingday weathersit ## 1       1 2011-01-01      1  0    1       0       6          0          2 ## 2       2 2011-01-02      1  0    1       0       0          0          2 ## 3       3 2011-01-03      1  0    1       0       1          1          1 ## 4       4 2011-01-04      1  0    1       0       2          1          1 ## 5       5 2011-01-05      1  0    1       0       3          1          1 ## 6       6 2011-01-06      1  0    1       0       4          1          1 ##       temp    atemp      hum windspeed casual registered  cnt ## 1 0.344167 0.363625 0.805833 0.1604460    331        654  985 ## 2 0.363478 0.353739 0.696087 0.2485390    131        670  801 ## 3 0.196364 0.189405 0.437273 0.2483090    120       1229 1349 ## 4 0.200000 0.212122 0.590435 0.1602960    108       1454 1562 ## 5 0.226957 0.229270 0.436957 0.1869000     82       1518 1600 ## 6 0.204348 0.233209 0.518261 0.0895652     88       1518 1606"},{"path":"https://tnagler.github.io/vinereg/articles/bike-rental.html","id":"rename-variables","dir":"Articles","previous_headings":"Data preparation","what":"Rename variables","title":"D-vine quantile regression with discrete variables: analysis of bike rental data","text":"","code":"bikedata  <- bikedata %>%     rename(         temperature = atemp,          month = mnth,         weathersituation = weathersit,         humidity = hum,         count = cnt     )"},{"path":"https://tnagler.github.io/vinereg/articles/bike-rental.html","id":"un-normalize-variables","dir":"Articles","previous_headings":"Data preparation","what":"Un-normalize variables","title":"D-vine quantile regression with discrete variables: analysis of bike rental data","text":"See variable description UCI web page.","code":"bikedata <- bikedata %>%     mutate(         temperature = 66 * temperature + 16,         windspeed = 67 * windspeed,         humidity = 100 * humidity     )"},{"path":"https://tnagler.github.io/vinereg/articles/bike-rental.html","id":"show-trend","dir":"Articles","previous_headings":"Data preparation","what":"Show trend","title":"D-vine quantile regression with discrete variables: analysis of bike rental data","text":"","code":"ggplot(bikedata, aes(dteday, count)) +     geom_line() +      scale_x_date(labels = scales::date_format(\"%b %y\")) +      xlab(\"date\") +      ylab(\"rental count\") +      stat_smooth(method = \"lm\", se = FALSE, linetype = \"dashed\") +      theme(plot.title = element_text(lineheight = 0.8, size = 20)) +     theme(text = element_text(size = 18))"},{"path":"https://tnagler.github.io/vinereg/articles/bike-rental.html","id":"remove-trend","dir":"Articles","previous_headings":"Data preparation","what":"Remove trend","title":"D-vine quantile regression with discrete variables: analysis of bike rental data","text":"","code":"lm_trend <- lm(count ~ instant, data = bikedata) trend <- predict(lm_trend) bikedata <- mutate(bikedata, count = count / trend) ggplot(bikedata, aes(dteday, count)) +      geom_line() +      scale_x_date(labels = scales::date_format(\"%b %y\")) +      xlab(\"date\") +      ylab(\"detrended rental count\") +      theme(plot.title = element_text(lineheight = 0.8, size = 20)) +      theme(text = element_text(size = 18))"},{"path":"https://tnagler.github.io/vinereg/articles/bike-rental.html","id":"drop-useless-variables","dir":"Articles","previous_headings":"Data preparation","what":"Drop useless variables","title":"D-vine quantile regression with discrete variables: analysis of bike rental data","text":"","code":"bikedata <- bikedata %>%     select(-instant, -dteday, -yr) %>%  # time indices     select(-casual, -registered) %>%    # casual + registered = count     select(-holiday) %>%                # we use 'workingday' instead     select(-temp)                       # we use 'temperature' (feeling temperature)"},{"path":"https://tnagler.github.io/vinereg/articles/bike-rental.html","id":"declare-discrete-variables-as-ordered","dir":"Articles","previous_headings":"Data preparation","what":"Declare discrete variables as ordered","title":"D-vine quantile regression with discrete variables: analysis of bike rental data","text":"","code":"disc_vars <- c(\"season\", \"month\", \"weekday\", \"workingday\", \"weathersituation\") bikedata <- bikedata %>%     mutate(weekday = ifelse(weekday == 0, 7, weekday)) %>%  # sun at end of week     purrr::modify_at(disc_vars, as.ordered)"},{"path":[]},{"path":"https://tnagler.github.io/vinereg/articles/bike-rental.html","id":"fit-model","dir":"Articles","previous_headings":"D-vine regression model","what":"Fit model","title":"D-vine quantile regression with discrete variables: analysis of bike rental data","text":"","code":"fit <- vinereg(   count ~ .,    data = bikedata,    family = c(\"onepar\", \"tll\"),    selcrit = \"aic\" ) fit ## D-vine regression model: count | temperature, humidity, windspeed, month, weekday, weathersituation, season, workingday  ## nobs = 731, edf = 83.24, cll = 448.75, caic = -731.03, cbic = -348.61 summary(fit) ##                var      edf         cll       caic        cbic       p_value ## 1            count  9.59683 -198.076002  415.34567  459.437472            NA ## 2      temperature 21.96288  415.814280 -787.70280 -686.796245 1.057432e-161 ## 3         humidity 17.92242  118.868049 -201.89126 -119.548244  2.273140e-40 ## 4        windspeed  1.00000   22.821902  -43.64380  -39.049391  1.418340e-11 ## 5            month 16.20538   29.009883  -25.60900   48.845234  1.296498e-06 ## 6          weekday 13.55004   25.682883  -24.26568   37.988828  2.604590e-06 ## 7 weathersituation  1.00000   14.124718  -26.24944  -21.655023  1.066457e-07 ## 8           season  1.00000   14.199792  -26.39958  -21.805170  9.868655e-08 ## 9       workingday  1.00000    6.309013  -10.61803   -6.023613  3.820444e-04"},{"path":"https://tnagler.github.io/vinereg/articles/bike-rental.html","id":"in-sample-predictions","dir":"Articles","previous_headings":"D-vine regression model","what":"In-sample predictions","title":"D-vine quantile regression with discrete variables: analysis of bike rental data","text":"","code":"alpha_vec <- c(0.1, 0.5, 0.9) pred <- fitted(fit, alpha_vec)"},{"path":"https://tnagler.github.io/vinereg/articles/bike-rental.html","id":"marginal-effects","dir":"Articles","previous_headings":"D-vine regression model","what":"Marginal effects","title":"D-vine quantile regression with discrete variables: analysis of bike rental data","text":"","code":"plot_marginal_effects(     covs = select(bikedata, temperature),      preds = pred ) plot_marginal_effects(covs = select(bikedata, humidity), preds = pred) +     xlim(c(25, 100)) plot_marginal_effects(covs = select(bikedata, windspeed), preds = pred) month_labs <- c(\"Jan\",\"\", \"Mar\", \"\", \"May\", \"\", \"Jul\", \"\", \"Sep\", \"\", \"Nov\", \"\") plot_marginal_effects(covs = select(bikedata, month), preds = pred) +         scale_x_discrete(limits = 1:12, labels = month_labs) plot_marginal_effects(covs = select(bikedata, weathersituation),                        preds = pred) +     scale_x_discrete(limits = 1:3,labels = c(\"good\", \"medium\", \"bad\")) weekday_labs <- c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\") plot_marginal_effects(covs = select(bikedata, weekday), preds = pred) +     scale_x_discrete(limits = 1:7, labels = weekday_labs) plot_marginal_effects(covs = select(bikedata, workingday), preds = pred) +     scale_x_discrete(limits = 0:1, labels = c(\"no\", \"yes\")) +     geom_smooth(method = \"lm\", se = FALSE) +     xlim(c(0, 1)) season_labs <- c(\"spring\", \"summer\", \"fall\", \"winter\") plot_marginal_effects(covs = select(bikedata, season), preds = pred) +     scale_x_discrete(limits = 1:4, labels = season_labs)"},{"path":"https://tnagler.github.io/vinereg/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Nagler. Author, maintainer. Dani Kraus. Contributor.","code":""},{"path":"https://tnagler.github.io/vinereg/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nagler T (2024). vinereg: D-Vine Quantile Regression. R package version 0.11.0, https://tnagler.github.io/vinereg/.","code":"@Manual{,   title = {vinereg: D-Vine Quantile Regression},   author = {Thomas Nagler},   year = {2024},   note = {R package version 0.11.0},   url = {https://tnagler.github.io/vinereg/}, }"},{"path":"https://tnagler.github.io/vinereg/index.html","id":"vinereg","dir":"","previous_headings":"","what":"D-Vine Quantile Regression","title":"D-Vine Quantile Regression","text":"R package D-vine copula based mean quantile regression.","code":""},{"path":"https://tnagler.github.io/vinereg/index.html","id":"how-to-install","dir":"","previous_headings":"","what":"How to install","title":"D-Vine Quantile Regression","text":"stable release CRAN: latest development version:","code":"install.packages(\"vinereg\") # install.packages(\"remotes\") remotes::install_github(\"tnagler/vinereg\", build_vignettes = TRUE)"},{"path":"https://tnagler.github.io/vinereg/index.html","id":"functionality","dir":"","previous_headings":"","what":"Functionality","title":"D-Vine Quantile Regression","text":"See package website.","code":""},{"path":"https://tnagler.github.io/vinereg/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"D-Vine Quantile Regression","text":"","code":"set.seed(5) library(vinereg) data(mtcars)  # declare factors and discrete variables for (var in c(\"cyl\", \"vs\", \"gear\", \"carb\"))     mtcars[[var]] <- as.ordered(mtcars[[var]]) mtcars[[\"am\"]] <- as.factor(mtcars[[\"am\"]])  # fit model (fit <- vinereg(mpg ~ ., family = \"nonpar\", data = mtcars)) #> D-vine regression model: mpg | disp, qsec, hp, drat  #> nobs = 32, edf = 25.6, cll = -51.94, caic = 155.08, cbic = 192.61  summary(fit) #>    var       edf         cll       caic       cbic      p_value #> 1  mpg  0.000000 -100.189867 200.379733 200.379733           NA #> 2 disp 13.187762   29.521786 -32.668047 -13.338271 9.065782e-08 #> 3 qsec  2.272103    4.454079  -4.363952  -1.033648 1.559593e-02 #> 4   hp  7.178554   10.836467  -7.315826   3.206038 3.267907e-03 #> 5 drat  2.965553    3.441702  -0.952298   3.394419 7.382604e-02  # show marginal effects for all selected variables plot_effects(fit) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x' # predict mean and median head(predict(fit, mtcars, alpha = c(NA, 0.5)), 4) #>       mean      0.5 #> 1 22.58394 22.45433 #> 2 22.53425 22.41825 #> 3 25.10289 24.93384 #> 4 20.70358 20.80241"},{"path":"https://tnagler.github.io/vinereg/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"D-Vine Quantile Regression","text":"examples, look vignettes ","code":"vignette(\"abalone-example\", package = \"vinereg\") vignette(\"bike-rental\", package = \"vinereg\")"},{"path":"https://tnagler.github.io/vinereg/index.html","id":"references","dir":"","previous_headings":"Vignettes","what":"References","title":"D-Vine Quantile Regression","text":"Kraus Czado (2017). D-vine copula based quantile regression. Computational Statistics & Data Analysis, 110, 1-18. link, preprint Schallhorn, N., Kraus, D., Nagler, T., Czado, C. (2017). D-vine quantile regression discrete variables. Working paper, preprint.","code":""},{"path":"https://tnagler.github.io/vinereg/reference/cll.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional log-likelihood — cll","title":"Conditional log-likelihood — cll","text":"Calculates conditional log-likelihood response given covariates.","code":""},{"path":"https://tnagler.github.io/vinereg/reference/cll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional log-likelihood — cll","text":"","code":"cll(object, newdata, cores = 1)"},{"path":"https://tnagler.github.io/vinereg/reference/cll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional log-likelihood — cll","text":"object object class vinereg. newdata matrix response covariate values compute conditional distribution. cores integer; number cores use computations.","code":""},{"path":"https://tnagler.github.io/vinereg/reference/cll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional log-likelihood — cll","text":"","code":"# simulate data x <- matrix(rnorm(200), 100, 2) y <- x %*% c(1, -2) dat <- data.frame(y = y, x = x, z = as.factor(rbinom(100, 2, 0.5)))  # fit vine regression model fit <- vinereg(y ~ ., dat)  cll(fit, dat) #> [1] 69.65749 fit$stats$cll #> [1] 69.65749"},{"path":"https://tnagler.github.io/vinereg/reference/cpdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional PDF — cpdf","title":"Conditional PDF — cpdf","text":"Calculates conditional density response given covariates.","code":""},{"path":"https://tnagler.github.io/vinereg/reference/cpdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional PDF — cpdf","text":"","code":"cpdf(object, newdata, cores = 1)"},{"path":"https://tnagler.github.io/vinereg/reference/cpdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional PDF — cpdf","text":"object object class vinereg. newdata matrix response covariate values compute conditional density cores integer; number cores use computations.","code":""},{"path":"https://tnagler.github.io/vinereg/reference/cpdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional PDF — cpdf","text":"","code":"# simulate data x <- matrix(rnorm(200), 100, 2) y <- x %*% c(1, -2) dat <- data.frame(y = y, x = x, z = as.factor(rbinom(100, 2, 0.5)))  # fit vine regression model fit <- vinereg(y ~ ., dat)  cpdf(fit, dat) #>   [1]  6.206402235  5.671327110  1.612085303  2.182855506  2.542592310 #>   [6]  0.007697279  3.896968803  3.341970416  4.742566646  1.714196263 #>  [11]  1.675358255  3.239965056  0.164847092  0.011468378  2.577513774 #>  [16]  5.469922453  5.352151308  2.631555771  3.334871593  3.582614759 #>  [21]  2.537402660  2.101394582  5.139318884  1.155939808  3.694409774 #>  [26]  4.726450640  4.492900047  4.435267051  5.571735855  3.755376897 #>  [31]  2.588842529  5.694743014  4.110916978  0.949554713  3.937017024 #>  [36]  0.384815435  3.382819554  6.088654381  2.569081399  3.380737221 #>  [41]  2.315055384  5.599906833  3.295564606  2.797618427  0.237736601 #>  [46]  5.288415229  0.086195942  3.511973723  0.738279638  3.840185607 #>  [51]  4.133190235  1.682990487  4.127789267  1.288344163  3.261921460 #>  [56]  0.797146515  4.327934472  5.975396623  3.088149694 12.607577093 #>  [61]  0.499637255  5.008738593  4.055429182  4.978707630  6.065446299 #>  [66]  0.352823790  4.420009331  2.765094818  5.011593300  0.821209322 #>  [71]  0.064880901  1.693169307  3.764847082  1.770010086  3.260307542 #>  [76]  5.789683015  3.712054622  3.618197906  4.956659644  2.031406448 #>  [81]  0.363233850  6.509880698  2.929127275  0.022101977  3.745144126 #>  [86]  4.630348426  2.081338819  3.900729266  3.469684450  2.189533769 #>  [91]  2.423086661  2.719546675  2.455886343  4.168894295  1.304212236 #>  [96]  2.568752361  0.002707072  0.629929049  2.224178534  4.458466781"},{"path":"https://tnagler.github.io/vinereg/reference/cpit.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional probability integral transform — cpit","title":"Conditional probability integral transform — cpit","text":"Calculates conditional distribution response given covariates.","code":""},{"path":"https://tnagler.github.io/vinereg/reference/cpit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional probability integral transform — cpit","text":"","code":"cpit(object, newdata, cores = 1)"},{"path":"https://tnagler.github.io/vinereg/reference/cpit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional probability integral transform — cpit","text":"object object class vinereg. newdata matrix response covariate values compute conditional distribution. cores integer; number cores use computations.","code":""},{"path":"https://tnagler.github.io/vinereg/reference/cpit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional probability integral transform — cpit","text":"","code":"# simulate data x <- matrix(rnorm(200), 100, 2) y <- x %*% c(1, -2) dat <- data.frame(y = y, x = x, z = as.factor(rbinom(100, 2, 0.5)))  # fit vine regression model fit <- vinereg(y ~ ., dat)  hist(cpit(fit, dat)) # should be approximately uniform"},{"path":"https://tnagler.github.io/vinereg/reference/plot_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marginal effects of a D-vine regression model — plot_effects","title":"Plot marginal effects of a D-vine regression model — plot_effects","text":"marginal effects variable expected effect, expectation meant respect variables.","code":""},{"path":"https://tnagler.github.io/vinereg/reference/plot_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marginal effects of a D-vine regression model — plot_effects","text":"","code":"plot_effects(object, alpha = c(0.1, 0.5, 0.9), vars = object$order)"},{"path":"https://tnagler.github.io/vinereg/reference/plot_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marginal effects of a D-vine regression model — plot_effects","text":"object vinereg object alpha vector quantile levels. vars vector variable names.","code":""},{"path":"https://tnagler.github.io/vinereg/reference/plot_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marginal effects of a D-vine regression model — plot_effects","text":"","code":"# simulate data x <- matrix(rnorm(200), 100, 2) y <- x %*% c(1, -2) dat <- data.frame(y = y, x = x, z = as.factor(rbinom(100, 2, 0.5)))  # fit vine regression model fit <- vinereg(y ~ ., dat) plot_effects(fit) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x' #> Warning: pseudoinverse used at 0.995 #> Warning: neighborhood radius 1.005 #> Warning: reciprocal condition number  0 #> Warning: There are other near singularities as well. 1.01 #> Warning: pseudoinverse used at 0.995 #> Warning: neighborhood radius 1.005 #> Warning: reciprocal condition number  0 #> Warning: There are other near singularities as well. 1.01 #> Warning: pseudoinverse used at 0.995 #> Warning: neighborhood radius 1.005 #> Warning: reciprocal condition number  0 #> Warning: There are other near singularities as well. 1.01"},{"path":"https://tnagler.github.io/vinereg/reference/predict.vinereg.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict conditional mean and quantiles from a D-vine regression model — predict.vinereg","title":"Predict conditional mean and quantiles from a D-vine regression model — predict.vinereg","text":"Predict conditional mean quantiles D-vine regression model","code":""},{"path":"https://tnagler.github.io/vinereg/reference/predict.vinereg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict conditional mean and quantiles from a D-vine regression model — predict.vinereg","text":"","code":"# S3 method for class 'vinereg' predict(object, newdata, alpha = 0.5, cores = 1, ...)  # S3 method for class 'vinereg' fitted(object, alpha = 0.5, ...)"},{"path":"https://tnagler.github.io/vinereg/reference/predict.vinereg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict conditional mean and quantiles from a D-vine regression model — predict.vinereg","text":"object object class vinereg. newdata matrix covariate values predict quantile. alpha vector quantile levels; NA predicts mean based average 1:10 / 11-quantiles. cores integer; number cores use computations. ... unused.","code":""},{"path":"https://tnagler.github.io/vinereg/reference/predict.vinereg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict conditional mean and quantiles from a D-vine regression model — predict.vinereg","text":"data.frame quantiles column corresponds one value alpha.","code":""},{"path":[]},{"path":"https://tnagler.github.io/vinereg/reference/predict.vinereg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict conditional mean and quantiles from a D-vine regression model — predict.vinereg","text":"","code":"# simulate data x <- matrix(rnorm(200), 100, 2) y <- x %*% c(1, -2) dat <- data.frame(y = y, x = x, z = as.factor(rbinom(100, 2, 0.5)))  # fit vine regression model (fit <- vinereg(y ~ ., dat)) #> D-vine regression model: y | x.2, x.1  #> nobs = 100, edf = 4, cll = 84.24, caic = -160.49, cbic = -150.07   # inspect model summary(fit) #>   var edf        cll      caic      cbic      p_value #> 1   y   0 -225.84803  451.6961  451.6961           NA #> 2 x.2   1   89.80766 -177.6153 -175.0101 5.880492e-41 #> 3 x.1   3  220.28444 -434.5689 -426.7534 3.602588e-95 plot_effects(fit) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'   # model predictions mu_hat <- predict(fit, newdata = dat, alpha = NA) # mean med_hat <- predict(fit, newdata = dat, alpha = 0.5) # median  # observed vs predicted plot(cbind(y, mu_hat))   ## fixed variable order (no selection) (fit <- vinereg(y ~ ., dat, order = c(\"x.2\", \"x.1\", \"z.1\"))) #> D-vine regression model: y | x.2, x.1, z.1  #> nobs = 100, edf = 4, cll = 84.24, caic = -160.49, cbic = -150.07"},{"path":"https://tnagler.github.io/vinereg/reference/vinereg.html","id":null,"dir":"Reference","previous_headings":"","what":"D-vine regression models — vinereg","title":"D-vine regression models — vinereg","text":"Sequential estimation regression D-vine purpose quantile prediction described Kraus Czado (2017).","code":""},{"path":"https://tnagler.github.io/vinereg/reference/vinereg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"D-vine regression models — vinereg","text":"","code":"vinereg(   formula,   data,   family_set = \"parametric\",   selcrit = \"aic\",   order = NA,   par_1d = list(),   weights = numeric(),   cores = 1,   ...,   uscale = FALSE )"},{"path":"https://tnagler.github.io/vinereg/reference/vinereg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"D-vine regression models — vinereg","text":"formula object class \"formula\"; lm(). data data frame (object coercible .data.frame()) containing variables model. family_set see family_set argument rvinecopulib::bicop(). selcrit selection criterion based conditional log-likelihood. \"loglik\" (default) imposes correction; choices \"aic\" \"bic\". order order covariates D-vine, provided vector variable names (calling vinereg:::expand_factors(model.frame(formula, data))); selected automatically order = NA (default). par_1d list options passed kde1d::kde1d(), must one value margin, e.g. list(xmin = c(0, 0, NaN)) response first covariate non-negative support. weights optional vector weights observation. cores integer; number cores use computations. ... arguments passed rvinecopulib::bicop(). uscale TRUE, vinereg assumes marginal distributions taken care preliminary step.","code":""},{"path":"https://tnagler.github.io/vinereg/reference/vinereg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"D-vine regression models — vinereg","text":"object class vinereg. list containing elements formula formula used fit. selcrit criterion used variable selection. model_frame data used fit regression model. margins list marginal models fitted kde1d::kde1d(). vine rvinecopulib::vinecop_dist() object containing fitted D-vine. stats fit statistics conditional log-likelihood/AIC/BIC p-values variable's contribution. order order covariates chosen variable selection algorithm. selected_vars indices selected variables. Use predict.vinereg() predict conditional quantiles. summary.vinereg() shows contribution selected variable associated p-value derived likelihood ratio test.","code":""},{"path":"https://tnagler.github.io/vinereg/reference/vinereg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"D-vine regression models — vinereg","text":"discrete variables declared ordered() factor(), handled described Panagiotelis et al. (2012). different previous version data jittered fitting.","code":""},{"path":"https://tnagler.github.io/vinereg/reference/vinereg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"D-vine regression models — vinereg","text":"Kraus Czado (2017), D-vine copula based quantile regression, Computational Statistics Data Analysis, 110, 1-18 Panagiotelis, ., Czado, C., & Joe, H. (2012). Pair copula constructions multivariate discrete data. Journal American Statistical Association, 107(499), 1063-1072.","code":""},{"path":[]},{"path":"https://tnagler.github.io/vinereg/reference/vinereg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"D-vine regression models — vinereg","text":"","code":"# simulate data x <- matrix(rnorm(200), 100, 2) y <- x %*% c(1, -2) dat <- data.frame(y = y, x = x, z = as.factor(rbinom(100, 2, 0.5)))  # fit vine regression model (fit <- vinereg(y ~ ., dat)) #> D-vine regression model: y | x.2, x.1, z.2, z.1  #> nobs = 100, edf = 6, cll = 62.29, caic = -112.58, cbic = -96.95   # inspect model summary(fit) #>   var edf         cll         caic         cbic      p_value #> 1   y   0 -217.724919  435.4498379  435.4498379           NA #> 2 x.2   1   65.533489 -129.0669787 -126.4618085 2.393911e-30 #> 3 x.1   3  211.069184 -416.1383674 -408.3228569 3.544140e-91 #> 4 z.2   1    1.394265   -0.7885304    1.8166398 9.494126e-02 #> 5 z.1   1    2.020211   -2.0404210    0.5647492 4.442274e-02 plot_effects(fit) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x' #> Warning: pseudoinverse used at 0.995 #> Warning: neighborhood radius 1.005 #> Warning: reciprocal condition number  0 #> Warning: There are other near singularities as well. 1.01 #> Warning: pseudoinverse used at 0.995 #> Warning: neighborhood radius 1.005 #> Warning: reciprocal condition number  0 #> Warning: There are other near singularities as well. 1.01 #> Warning: pseudoinverse used at 0.995 #> Warning: neighborhood radius 1.005 #> Warning: reciprocal condition number  0 #> Warning: There are other near singularities as well. 1.01 #> Warning: pseudoinverse used at 0.995 #> Warning: neighborhood radius 1.005 #> Warning: reciprocal condition number  0 #> Warning: There are other near singularities as well. 1.01 #> Warning: pseudoinverse used at 0.995 #> Warning: neighborhood radius 1.005 #> Warning: reciprocal condition number  0 #> Warning: There are other near singularities as well. 1.01 #> Warning: pseudoinverse used at 0.995 #> Warning: neighborhood radius 1.005 #> Warning: reciprocal condition number  0 #> Warning: There are other near singularities as well. 1.01   # model predictions mu_hat <- predict(fit, newdata = dat, alpha = NA) # mean med_hat <- predict(fit, newdata = dat, alpha = 0.5) # median  # observed vs predicted plot(cbind(y, mu_hat))   ## fixed variable order (no selection) (fit <- vinereg(y ~ ., dat, order = c(\"x.2\", \"x.1\", \"z.1\"))) #> D-vine regression model: y | x.2, x.1, z.1  #> nobs = 100, edf = 4, cll = 58.88, caic = -109.76, cbic = -99.33"},{"path":"https://tnagler.github.io/vinereg/news/index.html","id":"vinereg-0110","dir":"Changelog","previous_headings":"","what":"vinereg 0.11.0","title":"vinereg 0.11.0","text":"DEPENDS Adapts new now required versions kde1d (>= 1.1.0) rvinecopulib (>= 0.7.0.1.0). BUG FIX Fixed conditional density computations discrete variables (#17, thanks @FLBuchner.)","code":""},{"path":"https://tnagler.github.io/vinereg/news/index.html","id":"vinereg-0100","dir":"Changelog","previous_headings":"","what":"vinereg 0.10.0","title":"vinereg 0.10.0","text":"CRAN release: 2024-02-09 NEW FEATURE New function pdf() compute conditional log-likelihood.","code":""},{"path":"https://tnagler.github.io/vinereg/news/index.html","id":"vinereg-092","dir":"Changelog","previous_headings":"","what":"vinereg 0.9.2","title":"vinereg 0.9.2","text":"CRAN release: 2023-11-02 BUG FIX add compiler flag prevent boost/functional using unary_function.","code":""},{"path":"https://tnagler.github.io/vinereg/news/index.html","id":"vinereg-091","dir":"Changelog","previous_headings":"","what":"vinereg 0.9.1","title":"vinereg 0.9.1","text":"CRAN release: 2023-10-23 BUG FIX fix unnecessary error calling vinereg() weights.","code":""},{"path":"https://tnagler.github.io/vinereg/news/index.html","id":"vinereg-090","dir":"Changelog","previous_headings":"","what":"vinereg 0.9.0","title":"vinereg 0.9.0","text":"NEW FEATURE New function cll() compute conditional log-likelihood.","code":""},{"path":"https://tnagler.github.io/vinereg/news/index.html","id":"vinereg-083","dir":"Changelog","previous_headings":"","what":"vinereg 0.8.3","title":"vinereg 0.8.3","text":"CRAN release: 2022-03-23 BUG FIX avoid bit-wise operations boolean variables (fixes warnings clang>=14).","code":""},{"path":"https://tnagler.github.io/vinereg/news/index.html","id":"vinereg-082","dir":"Changelog","previous_headings":"","what":"vinereg 0.8.2","title":"vinereg 0.8.2","text":"CRAN release: 2022-03-15 DEPENDS require recent version vinecopulib (>= 0.6.1.1.2) ensure compatible RcppThread versions.","code":""},{"path":"https://tnagler.github.io/vinereg/news/index.html","id":"vinereg-081","dir":"Changelog","previous_headings":"","what":"vinereg 0.8.1","title":"vinereg 0.8.1","text":"CRAN release: 2022-01-22 BUG FIXES require() calls single argument vignettes. vinereg 0.8.0 BUG FIXES fix cpit() (last conditioning sometimes omitted). prevent rvinecopulib spawning threads. NEW FEATURES add uscale option allow external marginal modeling.","code":""},{"path":"https://tnagler.github.io/vinereg/news/index.html","id":"vinereg-073","dir":"Changelog","previous_headings":"","what":"vinereg 0.7.3","title":"vinereg 0.7.3","text":"CRAN release: 2021-02-24 BUG FIXES fix simulated data size documentation examples.","code":""},{"path":"https://tnagler.github.io/vinereg/news/index.html","id":"vinereg-073-1","dir":"Changelog","previous_headings":"","what":"vinereg 0.7.3","title":"vinereg 0.7.3","text":"CRAN release: 2021-02-24 BUG FIXES properly handle case covariates selected. conditional use packages Suggests.","code":""},{"path":"https://tnagler.github.io/vinereg/news/index.html","id":"vinereg-072","dir":"Changelog","previous_headings":"","what":"vinereg 0.7.2","title":"vinereg 0.7.2","text":"CRAN release: 2020-11-17 BUG FIXES remove bias quantiles discrete variables.","code":""},{"path":"https://tnagler.github.io/vinereg/news/index.html","id":"vinereg-071","dir":"Changelog","previous_headings":"","what":"vinereg 0.7.1","title":"vinereg 0.7.1","text":"CRAN release: 2020-10-12 maintenance release following update rvinecopulib. DEPENDS requires rvinecopulib (>= 0.5.4.1.0) fix unitialized value issue. NEW FEATURES variables generated factors now named corresponding factor level.","code":""},{"path":"https://tnagler.github.io/vinereg/news/index.html","id":"vinereg-070","dir":"Changelog","previous_headings":"","what":"vinereg 0.7.0","title":"vinereg 0.7.0","text":"CRAN release: 2019-12-02 DEPENDENCIES removed dependence future furrr packages. NEW FEATURES faster runtimes, especially parallelized code. handle discrete variables properly parametric nonparametric pair-copulas. REMOVED FEATURES removed support uscale argument.","code":""},{"path":"https://tnagler.github.io/vinereg/news/index.html","id":"vinereg-060","dir":"Changelog","previous_headings":"","what":"vinereg 0.6.0","title":"vinereg 0.6.0","text":"NEW FEATURES new function cpit() compute conditional cdf.","code":""},{"path":"https://tnagler.github.io/vinereg/news/index.html","id":"vinereg-050","dir":"Changelog","previous_headings":"","what":"vinereg 0.5.0","title":"vinereg 0.5.0","text":"CRAN release: 2018-08-09 DEPENDS require rvinecopulib (>= 0.3.0) due breaking changes package. BUG FIXES prevent nan errors loglik calculation. allow empty bivariate models. properly pass degree parameter margin al estimation.","code":""},{"path":"https://tnagler.github.io/vinereg/news/index.html","id":"vinereg-040","dir":"Changelog","previous_headings":"","what":"vinereg 0.4.0","title":"vinereg 0.4.0","text":"BUG FIXES Fix handling uscale fitted.vinereg(). Fix handling mult parameter pair-copula fits vinereg(). Fix orientation asymmetric pair-copulas.","code":""},{"path":"https://tnagler.github.io/vinereg/news/index.html","id":"vinereg-030","dir":"Changelog","previous_headings":"","what":"vinereg 0.3.0","title":"vinereg 0.3.0","text":"CRAN release: 2018-06-02 DEPENDS Use furrr future packages instead parallel, doParallel, foreach parallelization. NEW FEATURES New print() summary() generics vinereg objects. New plot_effects() method show marginal effects variables. Allow predict mean predict(object, alpha = NA).","code":""},{"path":"https://tnagler.github.io/vinereg/news/index.html","id":"vinereg-020","dir":"Changelog","previous_headings":"","what":"vinereg 0.2.0","title":"vinereg 0.2.0","text":"CRAN release: 2018-05-29 First official release.","code":""}]
